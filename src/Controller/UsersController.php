<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Event\EventInterface;
use function mysql_xdevapi\getSession;

/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 * @method \App\Model\Entity\User[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class UsersController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->loadComponent('RequestHandler');
        $this->Authentication->allowUnauthenticated(['login','novasenhasiape','novasenhaemail','novasenharedefinir','celindex']);
    }

    public function index()
    {

        $users = $this->Users->find('all',['contain'=>'Roles']);

        $this->set(compact('users'));
    }
    public  function celindex()
    {
        $this->viewBuilder()->setLayout('json');
        $users = $this->Users->find('all',['contain'=>'Roles']);

        $this->viewBuilder()->setOption('serialize', 'users');
        $this->set(compact('users'));
    }
    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => ['Roles'],
        ]);

        $this->set(compact('user'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $roles = $this->Users->Roles->find('list', ['limit' => 200])->all();
        $this->set(compact('user', 'roles'));
    }

    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $roles = $this->Users->Roles->find('list', ['limit' => 200])->all();
        $this->set(compact('user', 'roles'));
    }

    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function login()
    {
        $result = $this->Authentication->getResult();

        // If the user is logged in send them away.
        if ($result->isValid()) {
            $target = $this->redirect(['controller' => 'Users', 'action' => 'index']);
            return $this->redirect($target);
        }
        if ($this->request->is('post') && !$result->isValid()) {
            $this->Flash->error('Siape ou senha inválidos');
        }
    }

    public function logout()
    {
        $this->Authentication->logout();
        return $this->redirect(['controller' => 'Users', 'action' => 'login']);
    }
    public function novasenhasiape()
    {

        if ($this->request->is(['patch', 'post', 'put'])) {
            $siapeRecuperacao = $this->request->getData()['siape'];
            $user = $this->Users->find('all', ['conditions' => ["Users.siape = $siapeRecuperacao"]])->toArray();

            if ($user) {
                $this->request->getSession()->write('usuario', $user);
                $this->redirect(['action' => 'novasenhaemail']);
            } else {
                $this->Flash->error('Siape não cadastrado.');
            }
        }

    }
    public function novasenhaemail()
    {
        $sessao = $this->request->getSession()->read();
        $sessao = $sessao['usuario'];
        $usuario = $sessao[0]['siape'];

        $this->loadModel('Employees');
        $employee = $this->Employees->find('all', ['conditions' => ["Employees.siape = $usuario"]])->toArray();
        $idUser = $employee[0]['id'];
        $nomeUser = $employee[0]['nome'];
        $siapeUser = $employee[0]['siape'];
        $emailUser = $employee[0]['email'];
        $emailUserCamuflado = substr_replace($emailUser, '____', 1, strpos($emailUser, '@') - 2);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $getData = $this->request->getData();
            $confirmacaoEmail = $this->request->getData()['confirmacaoEmail'];

            if ($confirmacaoEmail == $emailUser) {
                $user['id'] = $idUser;
                $user['siape'] = $siapeUser;
                $user['nome'] = $nomeUser;
                $user['email'] = $emailUser;

                $this->request->getSession()->delete('usuario');

                $this->request->getSession()->write('user', $user);

                $this->redirect(['action' => 'novasenharedefinir']);
            } else {
                $this->Flash->error('E-mail inválido.');
            }
        }

        $this->set(compact('nomeUser', 'siapeUser', 'emailUserCamuflado', 'idUser'));

    }
    public function novasenharedefinir()
    {
        $sessao = $this->request->getSession()->read('user');

        $nomeUser = $sessao['nome'];
        $siapeUser = $sessao['siape'];
        $emailUser = $sessao['email'];
        $idUser = $sessao['id'];

        $sessao = $this->Users->get($idUser, ['contain' => [],]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($sessao, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('Senha alterada com sucesso.'));
                $this->redirect(['action' => 'login']);
            } else {
                $this->Flash->error(__('A senha não foi alterada. Tente novamente.'));
            }
        }

        $this->set(compact('nomeUser', 'siapeUser', 'emailUser', 'idUser'));


    }
}
